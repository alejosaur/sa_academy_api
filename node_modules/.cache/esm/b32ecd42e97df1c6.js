"main";_e97‍.x([["CoursesAPI",()=>CoursesAPI]]);let RESTDataSource;_e97‍.w("apollo-datasource-rest",[["RESTDataSource",["RESTDataSource"],function(v){RESTDataSource=v}]]);yield;

const axios = require('axios')

       class CoursesAPI extends RESTDataSource {
    constructor() {
        super();
        this.baseURL = 'http://35.199.81.116:3000/';
    }

    async getAllResidents() {
        return this.get('residents');
    }

    async getAResident(idNumber) {
        const result = await this.get('residents/'+idNumber);

        return result;
    }

    async createAResident(args) {
        _e97‍.g.console.log(args.admission_date);
        _e97‍.g.console.log(args.birth_date);
        args.baseURL = this.baseURL
        return new Promise(function(resolve,reject) {
            axios.post(args.baseURL+'residents', {
                name: args.name,
                birth_date: args.birth_date,
                admission_date: args.admission_date,
                gender: args.gender,
                state: args.state,
                contact_name: args.contact_name,
                contact_phone: args.contact_phone
            })
            .then((res) => {
                _e97‍.g.console.log(args.admission_date)
                resolve(res.data);
            })
            .catch((error) => {
                _e97‍.g.console.error(error)
            })
        })
    }

    async editAResident(args) {
        var object = await this.getAResident(args._id)

        args.baseURL = this.baseURL
        return new Promise(function(resolve,reject) {
            axios.put(args.baseURL+'residents/'+args._id, {
                name: (args.hasOwnProperty("name") ?args.name:object.name),
                birth_date: (args.hasOwnProperty("birth_date") ?args.birth_date:object.birth_date),
                admission_date: (args.hasOwnProperty("admission_date") ?args.admission_date:object.admission_date),
                gender: (args.hasOwnProperty("gender") ?args.gender:object.gender),
                state: (args.hasOwnProperty("state") ?args.state:object.state),
                contact_name: (args.hasOwnProperty("contact_name") ?args.contact_name:object.contact_name),
                contact_phone: (args.hasOwnProperty("contact_phone") ?args.contact_phone:object.contact_phone),
                diseases: (args.hasOwnProperty("diseases") ?args.diseases:object.diseases),
            })
            .then((res) => {
                resolve(res.data);
            })
            .catch((error) => {
                _e97‍.g.console.error(error)
            })
        })
    }

    async deleteAResident(idNumber) {
        this.delete('residents/'+idNumber)
        return "Deleted successfully"
    }
};
