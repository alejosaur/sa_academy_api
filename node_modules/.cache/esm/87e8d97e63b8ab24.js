"main";let ApolloServer,gql;_63b‍.w("apollo-server",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);let ResidentAPI,ReportsAPI,TransactionAPI;_63b‍.w("./datasource",[["ResidentAPI",["ResidentAPI"],function(v){ResidentAPI=v}],["ReportsAPI",["ReportsAPI"],function(v){ReportsAPI=v}],["TransactionAPI",["TransactionAPI"],function(v){TransactionAPI=v}]]);yield;


const { find, filter } = require('lodash');

const typeDefs = gql`
    type Resident {
        _id: ID!
        identity_document: Int
        name: String!
        birth_date: String
        admission_date: String!
        gender: String!
        state: String
        contact_name: String
        contact_phone: Int
        diseases: String
    }

    type Report_type {
        id: ID!
        Type: String!
    }

    type Report {
        id: ID!
        report_type_id: ID!
        created_at: String
        IP: String
    }

    type Transaction {
        id: ID!
        type_transation_id: ID!
        total_amount: Int
        observation: String
        balance: Int
        contact_name: String
    }

    type Query {
        resident(idNumber: String!): Resident
        residents: [Resident]
        report(idNumber: Int!): Report
        reports: [Report]
        report_types: [Report_type]
        transaction(idNumber: String!): Transaction
        transactions: [Transaction]
    }
`;

const resolvers = {
    Query: {
        resident: (root, { idNumber }, { dataSources }) => dataSources.ResidentAPI.getAResident(idNumber),
        residents: (root, args, { dataSources }) => dataSources.ResidentAPI.getAllResidents(),
        report: (root, { idNumber }, { dataSources }) => dataSources.ReportsAPI.getAReport(idNumber),
        reports: (root, args, { dataSources }) => dataSources.ReportsAPI.getAllReports(),
        report_types: (root, args, { dataSources }) => dataSources.ReportsAPI.getAllTypes(),
        transaction: (root, { idNumber }, { dataSources }) => dataSources.TransactionAPI.getATransaction(idNumber),
        transactions: (root, args, { dataSources }) => dataSources.TransactionAPI.getAllTransactions(),
    },
    Mutations: {
    submitRepository(_, { repoFullName }, context) {
      if (! context.user) {
        throw new Error('Must be logged in to submit a repository.');
      }

      return Promise.resolve()
        .then(() => (
          context.Repositories.getByFullName(repoFullName)
            .catch(() => {
              throw new Error(`Couldn't find repository named "${repoFullName}"`);
            })
        ))
        .then(() => (
          context.Entries.submitRepository(repoFullName, context.user.login)
        ))
        .then(() => context.Entries.getByRepoFullName(repoFullName));
    },
}
};

const server = new ApolloServer({
    typeDefs,
    resolvers,
    dataSources: () => ({
        ResidentAPI: new ResidentAPI(),
        ReportsAPI: new ReportsAPI(),
        TransactionAPI: new TransactionAPI(),
    }),
});

server.listen().then(({ url }) => {
    _63b‍.g.console.log(`🚀 Server ready at ${url}`);
});
