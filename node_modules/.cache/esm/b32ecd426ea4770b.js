"main";_6ea‍.x([["TransactionAPI",()=>TransactionAPI]]);let RESTDataSource;_6ea‍.w("apollo-datasource-rest",[["RESTDataSource",["RESTDataSource"],function(v){RESTDataSource=v}]]);

const axios = require('axios')

       class TransactionAPI extends RESTDataSource {
    constructor() {
        super();
        this.baseURL = 'http://localhost:8000/';
    }

    async getAllTransactions() {
        const result = await this.get('courses-ms/resources/courses/');
        return result["results"];
    }

    async getATransaction(idNumber) {
        const result = await this.get('transaction/'+idNumber);

        return result;
    }

    async createATransaction(args) {
        args.baseURL = this.baseURL
        return new Promise(function(resolve,reject) {
            axios.post(args.baseURL+'transaction', {
                type_transation_id: args.type_transation_id,
                total_amount: args.total_amount,
                observation: args.observation,
                balance: args.balance,
                contact_name: args.contact_name,
                transactiondetails: [{
                    quantity: args.quantity,
                    subtotal: args.subtotal
                }]

            })
            .then((res) => {
                resolve("Created");
            })
            .catch((error) => {
                _6ea‍.g.console.error(error)
            })
        })
    }

    async editATransaction(args) {
        var object = await this.getATransaction(args.id)

        args.baseURL = this.baseURL
        return new Promise(function(resolve,reject) {
            axios.put(args.baseURL+'transaction/'+args.id, {
                type_transation_id: (args.hasOwnProperty("type_transation_id") ?args.type_transation_id:object.type_transation_id),
                total_amount: (args.hasOwnProperty("total_amount") ?args.total_amount:object.total_amount),
                observation: (args.hasOwnProperty("observation") ?args.observation:object.observation),
                balance: (args.hasOwnProperty("balance") ?args.balance:object.balance),
                contact_name: (args.hasOwnProperty("contact_name") ?args.contact_name:object.contact_name),
            })
            .then((res) => {
                resolve(res.data);
            })
            .catch((error) => {
                _6ea‍.g.console.error(error)
            })
        })
    }

    async deleteATransaction(idNumber) {
        this.delete('transaction/'+idNumber)
        return "Deleted successfully"
    }
};
