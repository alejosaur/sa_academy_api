"main";let ApolloServer,gql;_160‍.w("apollo-server",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);let MvrpAPI;_160‍.w("./datasource",[["MvrpAPI",["MvrpAPI"],function(v){MvrpAPI=v}]]);yield;


const typeDefs = gql`
  type Resident {
      _id: Int!
      identity_document: Int!
      name: String!
      birth_date: String!
      admission_date: String!
      gender: String!
      state: String!
      contact_name: String!
      contact_phone: Int!
      diseases: String!


    id: Int!
    plateNumber: String!
    color: String!
    model: String!
    chasisNumber: String!
    vehicleStatus: String!
    yearOfManufacture: Int!
    issueDate: String!
    expiryDate: String!
  }

  type Query {
    car(idNumber: String!): Car
    cars: [Car]
  }
`;

const resolvers = {
  Query: {
    resident: (root, { plateNumber }, { dataSources }) =>
      dataSources.mvrpAPI.getACar(plateNumber),
    residents: (root, args, { dataSources }) => dataSources.mvrpAPI.getAllCars(),
  },
  Resident: {
    vehicleStatus: ({ status }) => status,
    yearOfManufacture: ({ productionYear }) => productionYear,
  },
};

const server = new ApolloServer({
  typeDefs,
  resolvers,
  dataSources: () => ({
    mvrpAPI: new MvrpAPI(),
  }),
});

server.listen().then(({ url }) => {
  _160‍.g.console.log(`🚀 Server ready at ${url}`);
});
