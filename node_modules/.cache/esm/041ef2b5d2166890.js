"main";let ApolloServer,gql;_d21‍.w("apollo-server",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);let ResidentAPI;_d21‍.w("./datasource",[["ResidentAPI",["ResidentAPI"],function(v){ResidentAPI=v}]]);yield;


const typeDefs = gql`
    type Resident {
        _id: String!
        identity_document: Int
        name: String!
        birth_date: String
        admission_date: String!
        gender: String!
        state: String
        contact_name: String
        contact_phone: Int
        diseases: String
    }

    type Report_type {
        id: Int!
        Type: String!
    }

    type Report {
        id: Int!
        report_type_id: Report_type
        created_at: String
        IP: String
    }

    type Query {
        resident(idNumber: String!): Resident
        residents: [Resident]
        report(idNumber: Int!): report
        reports: [Report]
    }
`;

const resolvers = {
    Query: {
        resident: (root, { idNumber }, { dataSources }) => dataSources.ResidentAPI.getAResident(idNumber),
        residents: (root, args, { dataSources }) => dataSources.ResidentAPI.getAllResidents(),
        report: (root, { idNumber }, { dataSources }) => dataSources.ReportsAPI.getAReport(idNumber),
        reports: (root, args, { dataSources }) => dataSources.ReportsAPI.getAllReports(),
        report_types: (root, args, { dataSources }) => dataSources.ReportsAPI.getAllTypes(),
    },
    Resident: {
        identity_document: ({ idDoc }) => idDoc,
        diseases: ({ reportedDiseases }) => reportedDiseases,
    },
};

const server = new ApolloServer({
    typeDefs,
    resolvers,
    dataSources: () => ({
        ResidentAPI: new ResidentAPI(),
        ReportsAPI: new ReportsAPI(),
    }),
});

server.listen().then(({ url }) => {
    _d21‍.g.console.log(`🚀 Server ready at ${url}`);
});
