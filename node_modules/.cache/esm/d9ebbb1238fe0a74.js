"main";let ApolloServer,gql;_38f‍.w("apollo-server",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);let CoursesAPI;_38f‍.w("./datasource",[["CoursesAPI",["CoursesAPI"],function(v){CoursesAPI=v}]]);


const { find, filter } = require('lodash');

const typeDefs = gql`
    type Course {
        code: ID!
        credits: int
        name: String
        professor: String
    }

    type Query {
        course(idNumber: String!): Course
        courses: [Course]
    }

    type Mutation {
        createCourse(    credits: int
                        name: String
                        professor: String): Course

        updateCourse(   code: ID!
                        credits: int
                        name: String
                        professor: String): Course

        deleteCourse(idNumber: String):String
    }
`;

const resolvers = {
    Query: {
        course: (root, { idNumber }, { dataSources }) => dataSources.CoursesAPI.getACourse(idNumber),
        courses: (root, args, { dataSources }) => dataSources.CoursesAPI.getAllCourses(),
    },
    Mutation: {
        newResident: (root, args, { dataSources }) =>  dataSources.ResidentAPI.createAResident(args),
        newReport: (root, args, { dataSources }) =>  dataSources.ReportsAPI.createAReport(args),
        newReportType: (root, args, { dataSources }) =>  dataSources.ReportsAPI.createAReportType(args),
        newTransaction: (root, args, { dataSources }) =>  dataSources.TransactionAPI.createATransaction(args),
        newEmployee: (root, args, { dataSources }) =>  dataSources.EmployeeAPI.createAnEmployee(args),
        newUser: (root, args, { dataSources }) =>  dataSources.EmployeeAPI.createAnUser(args),
        newNursinghome: (root, args, { dataSources }) =>  dataSources.NursingHomesAPI.createANursingHome(args),
        newBranch: (root, args, { dataSources }) =>  dataSources.NursingHomesAPI.createABranch(args),

        editResident: (root, args, { dataSources }) =>  dataSources.ResidentAPI.editAResident(args),
        editReport: (root, args, { dataSources }) =>  dataSources.ReportsAPI.editAReport(args),
        editReportType: (root, args, { dataSources }) =>  dataSources.ReportsAPI.editAReportType(args),
        editTransaction: (root, args, { dataSources }) =>  dataSources.TransactionAPI.editATransaction(args),
        editEmployee: (root, args, { dataSources }) =>  dataSources.EmployeeAPI.editAnEmployee(args),
        editUser: (root, args, { dataSources }) =>  dataSources.EmployeeAPI.editAnUser(args),
        editNursinghome: (root, args, { dataSources }) =>  dataSources.NursingHomesAPI.editANursinghome(args),
        editBranch: (root, args, { dataSources }) =>  dataSources.NursingHomesAPI.editABranch(args),

        deleteResident: (root, { idNumber }, { dataSources }) =>  dataSources.ResidentAPI.deleteAResident(idNumber),
        deleteReport: (root, { idNumber }, { dataSources }) =>  dataSources.ReportsAPI.deleteAReport(idNumber),
        deleteReportType: (root, { idNumber }, { dataSources }) =>  dataSources.ReportsAPI.deleteAReportType(idNumber),
        deleteTransaction: (root, { idNumber }, { dataSources }) =>  dataSources.TransactionAPI.deleteATransaction(idNumber),
        deleteEmployee: (root, { idNumber }, { dataSources }) =>  dataSources.EmployeeAPI.deleteAnEmployee(idNumber),
        deleteUser: (root, { idNumber }, { dataSources }) =>  dataSources.EmployeeAPI.deleteAnUser(idNumber),
        deleteNursinghome: (root, { idNumber }, { dataSources }) =>  dataSources.NursingHomesAPI.deleteANursinghome(idNumber),
        deleteBranch: (root, { idNumber }, { dataSources }) =>  dataSources.NursingHomesAPI.deleteABranch(idNumber),
    },
};

const server = new ApolloServer({
    typeDefs,
    resolvers,
    dataSources: () => ({
        CoursesAPI: new CoursesAPI(),
    }),
});

server.listen().then(({ url }) => {
    _38f‍.g.console.log(`🚀 Server ready at ${url}`);
});
