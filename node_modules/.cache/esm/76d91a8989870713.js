"main";_898‍.x([["ResidentAPI",()=>ResidentAPI],["ReportsAPI",()=>ReportsAPI],["TransactionAPI",()=>TransactionAPI]]);let RESTDataSource;_898‍.w("apollo-datasource-rest",[["RESTDataSource",["RESTDataSource"],function(v){RESTDataSource=v}]]);yield;

const http = require('http')

       class ResidentAPI extends RESTDataSource {
  constructor() {
    super();
    this.baseURL = 'http://localhost:3000/';
  }

  async getAllResidents() {
    return this.get('residents');
  }

  async getAResident(idNumber) {
    const result = await this.get('residents/'+idNumber);

    return result;
  }

  async createAResident(args) {
      const data = JSON.stringify({
        name: args.name,
        admission_date: args.admission_date,
        birth_date: args.birth_date,
        gender: args.gender,
        state: args.state,
        diseases: args.diseases
      })

      const options = {
        hostname: this.baseURL.split("://")[1].split(":")[0],
        port: 3000,
        path: '/residents',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': data.length
        }
      }

      const req = http.request(options, (res) => {
        _898‍.g.console.log(`statusCode: ${res.statusCode}`)

        res.on('data', (d) => {
          process.stdout.write(d)
        })
      })

      req.on('error', (error) => {
        _898‍.g.console.error(error)
      })

      req.write(data)
      req.on('response', res => {
          res.on('data', function (chunk) {
            parent.return (chunk.toString('utf8'));
          });
      });
      req.end()

  }
};

       class ReportsAPI extends RESTDataSource {
  constructor() {
    super();
    this.baseURL = 'http://localhost:3030/';
  }

  async getAllReports() {
    return this.get('reports');
  }

  async getAllTypes() {
    return this.get('report_types');
  }

  async getAReport(idNumber) {
    const result = await this.get('reports/'+idNumber);

    return result;
  }

  async getAType(idNumber) {
    const result = await this.get('report_types/'+idNumber);
    _898‍.g.console.log(result);
    return result;
  }
};

       class TransactionAPI extends RESTDataSource {
  constructor() {
    super();
    this.baseURL = 'http://35.199.81.116:8000/';
  }

  async getAllTransactions() {
    const result = await this.get('transaction/');
    return result["results"];
  }

  async getATransaction(idNumber) {
    const result = await this.get('transaction/'+idNumber);

    return result;
  }
};
