"main";let ApolloServer,gql;_982‍.w("apollo-server",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);let MvrpAPI;_982‍.w("./datasource",[["MvrpAPI",["MvrpAPI"],function(v){MvrpAPI=v}]]);yield;


const typeDefs = gql`
  type Resident {
      _id: Int!
      identity_document: Int!
      name: String!
      birth_date: String!
      admission_date: String!
      gender: String!
      state: String!
      contact_name: String!
      contact_phone: Int!
      diseases: String!
  }

  type Query {
    resident(idNumber: String!): Resident
    residents: [Resident]
  }
`;

const resolvers = {
  Query: {
    resident: (root, { idNumber }, { dataSources }) =>
      dataSources.mvrpAPI.getAResident(idNumber),
    residents: (root, args, { dataSources }) => dataSources.mvrpAPI.getAllResidents(),
  },
  Resident: {
    vehicleStatus: ({ status }) => status,
    yearOfManufacture: ({ productionYear }) => productionYear,
  },
};

const server = new ApolloServer({
  typeDefs,
  resolvers,
  dataSources: () => ({
    mvrpAPI: new MvrpAPI(),
  }),
});

server.listen().then(({ url }) => {
  _982‍.g.console.log(`🚀 Server ready at ${url}`);
});
