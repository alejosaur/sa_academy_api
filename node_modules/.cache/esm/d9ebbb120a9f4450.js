"main";let ApolloServer,gql;_0a9‍.w("apollo-server",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);let CoursesAPI;_0a9‍.w("./datasource",[["CoursesAPI",["CoursesAPI"],function(v){CoursesAPI=v}]]);yield;


const { find, filter } = require('lodash');

const typeDefs = gql`
    type Course {
        code: ID!
        credits: int
        name: String
        professor: String
    }

    type Query {
        course(idNumber: String!): Course
        courses: [Course]
    }

    type Mutation {
        createCourse(    credits: int
                        name: String
                        professor: String): Course

        updateCourse(   code: ID!
                        credits: int
                        name: String
                        professor: String): Course

        deleteCourse(idNumber: String):String
    }
`;

const resolvers = {
    Query: {
        course: (root, { idNumber }, { dataSources }) => dataSources.CoursesAPI.getACourse(idNumber),
        courses: (root, args, { dataSources }) => dataSources.CoursesAPI.getAllCourses(),
    },
    Mutation: {
        createCourse: (root, args, { dataSources }) =>  dataSources.ResidentAPI.createACourse(args),

        updateCourse: (root, args, { dataSources }) =>  dataSources.ResidentAPI.editACourse(args),

        deleteCourse: (root, { idNumber }, { dataSources }) =>  dataSources.ResidentAPI.deleteACourse(idNumber),
    },
};

const server = new ApolloServer({
    typeDefs,
    resolvers,
    dataSources: () => ({
        CoursesAPI: new CoursesAPI(),
    }),
});

server.listen().then(({ url }) => {
    _0a9‍.g.console.log(`🚀 Server ready at ${url}`);
});
